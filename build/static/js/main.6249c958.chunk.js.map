{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-selectors.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","components/ContactForm/ContactForm.js","components/Loader/Loader.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","isLoading","loading","filterContacts","createAction","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","data","addContact","name","phone","contact","post","deleteContact","id","delete","createReducer","fulfilled","payload","find","el","alert","pending","rejected","combineReducers","INITIAL_STATE","ContactForm","useState","setContact","dispatch","useDispatch","handleChange","target","value","reset","onSubmit","e","preventDefault","contactsOperations","className","s","form","form__label","type","form__input","pattern","title","required","onChange","form__button","PendingLoader","color","height","width","ContactList","useSelector","contactsSelectors","normalizedFilter","toLowerCase","includes","getFilteredContacts","useEffect","Loader","length","map","contacts__item","contacts__button","onClick","onDeleteContact","Filter","filter__input","contactsActions","App","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6249c958.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__1nE6a\",\"contacts__item\":\"ContactList_contacts__item__2VeqK\",\"contacts__button\":\"ContactList_contacts__button__21K_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__2N9AF\",\"filter__input\":\"Filter_filter__input__iFBVN\"};","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const isLoading = state => state.contacts.loading;","import { createAction } from '@reduxjs/toolkit';\n\nexport const filterContacts = createAction('contacts/filter');","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://61a24087014e1900176de8a4.mockapi.io';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n    'contacts/fetch',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.get('/contacts');\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n    'contacts/add',\r\n    async ({ name, phone }, { rejectWithValue }) => {\r\n        try {\r\n            const contact = {\r\n                name,\r\n                phone,\r\n            };\r\n            const { data } = await axios.post('/contacts', contact);\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n    'contacts/delete',\r\n    async (id, { rejectWithValue }) => {\r\n        try {\r\n            await axios.delete(`/contacts/${id}`);\r\n            return id;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n","import {combineReducers} from 'redux';\nimport {createReducer} from '@reduxjs/toolkit';\nimport { filterContacts } from './contacts-actions';\nimport { fetchContacts, addContact, deleteContact } from './contacts-operations';\n\nconst items = createReducer([], {\n    [fetchContacts.fulfilled]: (_, {payload}) => payload,\n    [addContact.fulfilled]: (state, { payload }) => {\n        if (state.find(el => el.name === payload.name)) {\n            alert(`${payload.name} is already in contacts`)\n            return;\n        } else {\n            return [payload, ...state];\n        }\n    },\n    [deleteContact.fulfilled]: (state, {payload}) => state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n    [filterContacts]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {    \n    [fetchContacts.pending]: () => true,\n    [fetchContacts.fulfilled]: () => false,\n    [fetchContacts.rejected]: () => false,\n    [addContact.pending]: () => true,\n    [addContact.fulfilled]: () => false,\n    [addContact.rejected]: () => false,\n    [deleteContact.pending]: () => true,\n    [deleteContact.fulfilled]: () => false,\n    [deleteContact.rejected]: () => false,\n})\n\nexport default combineReducers({\n    items,\n    filter,\n    loading,\n});\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {contactsOperations} from 'redux/contacts';\nimport s from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  phone: '',\n};\n\nfunction ContactForm() {\n  const [contact, setContact] = useState(INITIAL_STATE);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setContact({\n      ...contact,\n      [name]: value\n    })\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(contactsOperations.addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setContact(INITIAL_STATE);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.form__label}>\n        Name\n        <input\n          type=\"text\"\n          className={s.form__input}\n          name=\"name\"\n          value={contact.name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <label className={s.form__label}>\n        Phone\n        <input\n          type=\"tel\"\n          className={s.form__input}\n          name=\"phone\"\n          value={contact.phone}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\" className={s.form__button}>Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  target: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ContactForm;\n","import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nfunction PendingLoader() {\r\n    return <Loader\r\n        type=\"ThreeDots\"\r\n        color=\"#1b7bc9\"\r\n        height={80}\r\n        width={80}      \r\n    />;    \r\n}\r\n\r\nexport default PendingLoader;","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {contactsSelectors, contactsOperations} from 'redux/contacts';\nimport s from './ContactList.module.css';\nimport { Loader } from 'components/Loader';\n\nconst getFilteredContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n};\n\nfunction ContactList() {\n  const isLoading = useSelector(contactsSelectors.isLoading);\n  const contacts = useSelector(({contacts: {items, filter}}) => getFilteredContacts(items, filter));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const onDeleteContact = id => (dispatch(contactsOperations.deleteContact(id)));\n\n  return (\n  <>\n    {isLoading && <Loader />}\n    <ul className={s.contacts}>      \n      {(contacts.length > 1) && (\n        contacts.map(({ id, name, phone }) => (\n        <li key={id} className={s.contacts__item}>\n          {name}: {phone}\n          <button type=\"button\" className={s.contacts__button} onClick={() => onDeleteContact(id)}>Delete</button>\n        </li>))\n      )}\n    </ul>\n  </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {contactsSelectors, contactsActions} from 'redux/contacts';\nimport s from './Filter.module.css';\n\nfunction Filter() {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => dispatch(contactsActions.filterContacts(e.target.value));\n\n  return (\n    <>\n      <p className={s.filter}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        className={s.filter__input}\n        value={value}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        onChange={onFilterChange}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n\nexport default Filter;\n","import 'App.css';\nimport {ContactForm} from 'components/ContactForm';\nimport {ContactList} from 'components/ContactList';\nimport { Filter } from 'components/Filter';\n\nfunction App() {\n  return (   \n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />       \n    </div>\n  );\n}\n\nexport default App;\n","import {configureStore} from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport {contactsReducer} from './contacts';\n\nconst store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n    },\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n        serializableCheck: {\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n      }).concat(logger),\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'index.css';\nimport App from 'App';\nimport store from 'redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>       \n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__jfvFw\",\"form__input\":\"ContactForm_form__input__1JUZH\",\"form__label\":\"ContactForm_form__label__1U3NX\",\"form__button\":\"ContactForm_form__button__DL4r8\"};"],"sourceRoot":""}